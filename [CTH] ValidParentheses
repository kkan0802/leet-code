package me.asher.main;

import java.util.*;

/**
 * Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the
 * input string is valid.
 * <p>
 * An input string is valid if:
 * <p>
 * Open brackets must be closed by the same type of brackets. Open brackets must be closed in the
 * correct order.
 *
 * @author choiahser
 */
public class ValidParentheses {

    static Map<Character, Character> hashmap = new HashMap<>();

    static {
        hashmap.put('(', ')');
        hashmap.put('[', ']');
        hashmap.put('{', '}');
    }

    public static boolean isValid(String s) {
        Stack<Character> stack = new Stack<>();

        for (int i=0; i<s.length(); i++) {
            Character token = s.charAt(i);

            if (hashmap.containsKey(token)) {
                stack.add(token);
            } else if (hashmap.containsValue(token)) {
                if (stack.isEmpty() || !hashmap.get(stack.pop()).equals(token)) {
                    return false;
                }
            } else {
                throw new IllegalArgumentException("wrong token");
            }
        }
        return stack.isEmpty();
    }




    public static void main(String[] args) {
        System.out.println(isValid("(){}}{"));
        System.out.println(isValid("()"));
        System.out.println(isValid("()[]{}"));
        System.out.println(isValid("(]"));
        System.out.println(isValid("([)]"));
        System.out.println(isValid("{[]}"));
    }
}

